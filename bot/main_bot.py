import asyncio
import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from contextlib import suppress
from aiogram.exceptions import TelegramAPIError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "7562714456:AAHLG6zZxjUduK8Koh0-N_Z0fOtKRNGcq8Y"
API_BASE_URL = "http://127.0.0.1:8000" 

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ ---
STATUS_APPROVED = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è"
STATUS_DECLINED = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º"
STATUS_COMPLETED = "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
api_client = httpx.AsyncClient(base_url=API_BASE_URL)
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN)

# –ú–µ–Ω—é –¥–ª—è –ó–∞–∫–∞–∑—á–∏–∫–∞
customer_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")], [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")]],
    resize_keyboard=True
)
# –ú–µ–Ω—é –¥–ª—è –í–æ–¥–∏—Ç–µ–ª—è
driver_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="üöõ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫")]
    ], resize_keyboard=True)
# –ú–µ–Ω—é –¥–ª—è –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dispatcher_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üßê –ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")]],
    resize_keyboard=True
)
# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
confirm_order_kb = InlineKeyboardMarkup(
    inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="order_confirm"),
        InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")
    ]]
)
cancel_fsm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")]], resize_keyboard=True, one_time_keyboard=True)
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def get_dispatcher_approval_kb(order_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"dispatch_approve_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"dispatch_decline_{order_id}")
        ]]
    )

# --- FSM –∏ –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def is_valid_phone(phone: str):
    clean_phone = "".join(filter(str.isdigit, phone))
    return len(clean_phone) >= 10 and len(clean_phone) <= 12

class OrderFSM(StatesGroup):
    getting_address_from = State()
    getting_address_to = State()
    getting_cargo_description = State()
    getting_phone_number = State()
    confirming_order = State() 
    
class DispatcherDeclineFSM(StatesGroup):
    getting_reason = State()    
    
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def format_order_details(order: dict) -> str:
    payload = order.get('payload', {})
    decline_reason = payload.get('decline_reason')
    details = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{order.get('id', 'N/A')}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {order.get('status', 'N/A')}\n\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {payload.get('address_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèÅ <b>–ö—É–¥–∞:</b> {payload.get('address_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì¶ <b>–ì—Ä—É–∑:</b> {payload.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {payload.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    if decline_reason:
        details += f"\n\nüí¨ <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</b> {decline_reason}"
    return details

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/users/by_telegram/{telegram_id}")
        response.raise_for_status()
        user = response.json()
        
        if user['role'] == 'customer':
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}!", reply_markup=customer_menu)
        elif user['role'] == 'driver':
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}!", reply_markup=driver_menu)
        elif user['role'] == 'dispatcher':
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.", reply_markup=dispatcher_menu)
    
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")

# === –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò (FSM) ---
@dp.message(StateFilter(OrderFSM), F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")
async def cancel_fsm_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=customer_menu)

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_order(message: Message, state: FSMContext):
    await state.set_state(OrderFSM.getting_address_from)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏ (–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å):", reply_markup=cancel_fsm_kb)
@dp.message(OrderFSM.getting_address_from)
async def get_address_from(message: Message, state: FSMContext):
    await state.update_data(address_from=message.text)
    await state.set_state(OrderFSM.getting_address_to)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å):", reply_markup=cancel_fsm_kb)
@dp.message(OrderFSM.getting_address_to)
async def get_address_to(message: Message, state: FSMContext):
    await state.update_data(address_to=message.text)
    await state.set_state(OrderFSM.getting_cargo_description)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≥—Ä—É–∑:", reply_markup=cancel_fsm_kb)
@dp.message(OrderFSM.getting_cargo_description)
async def get_cargo_description(message: Message, state: FSMContext):
    await state.update_data(cargo=message.text)
    await state.set_state(OrderFSM.getting_phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=cancel_fsm_kb)
@dp.message(OrderFSM.getting_phone_number)
async def get_phone_number(message: Message, state: FSMContext):
    if not is_valid_phone(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä).", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(phone=message.text)
    data = await state.get_data()
    
    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:\n\n"
        f"<b>–û—Ç–∫—É–¥–∞:</b> {data['address_from']}\n"
        f"<b>–ö—É–¥–∞:</b> {data['address_to']}\n"
        f"<b>–ì—Ä—É–∑:</b> {data['cargo']}\n"
        f"<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    await message.answer(confirmation_text, reply_markup=confirm_order_kb, parse_mode="HTML")
    await state.set_state(OrderFSM.confirming_order)

@dp.callback_query(OrderFSM.confirming_order, F.data == "order_cancel")
async def cancel_order_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()

    await callback.message.delete()

    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=customer_menu
    )

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–ò–°–ü–ï–¢–ß–ï–†–ê ---
@dp.callback_query(OrderFSM.confirming_order, F.data == "order_confirm")
async def confirm_order_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id
    try:
        response = await api_client.post("/orders/", params={"customer_telegram_id": telegram_id}, json=data)
        response.raise_for_status()
        order = response.json()
        
        await bot.send_message(
    chat_id=telegram_id,
    text=f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.",
    reply_markup=customer_menu
)


        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        dispatchers_response = await api_client.get("/users/by_role/dispatcher")
        if dispatchers_response.status_code == 200:
            dispatchers = dispatchers_response.json()
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"view_order_{order['id']}")]
            ])
            for dispatcher in dispatchers:
                with suppress(TelegramAPIError):
                    await bot.send_message(
                        chat_id=dispatcher['telegram_id'],
                        text=f"‚ùóÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{order['id']} –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
                        reply_markup=keyboard
                    )
    except httpx.HTTPStatusError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e.response.text}")
    
    await state.clear()
    await callback.answer()

# === –õ–û–ì–ò–ö–ê –î–õ–Ø –ó–ê–ö–ê–ó–ß–ò–ö–ê (–ü–†–û–°–ú–û–¢–† –ó–ê–Ø–í–û–ö) ---
@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/orders/customer/{telegram_id}")
        response.raise_for_status()
        orders = response.json()
        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        await message.answer("–í–∞—à–∏ –∑–∞—è–≤–∫–∏:")
        for order in orders:
            await message.answer(await format_order_details(order), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏: {e}")

# === –õ–û–ì–ò–ö–ê –î–õ–Ø –î–ò–°–ü–ï–¢–ß–ï–†–ê ===
@dp.message(F.text == "üßê –ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def show_pending_orders(message: Message):
    response = await api_client.get("/orders/pending_approval")
    if response.status_code == 200:
        orders = response.json()
        if not orders:
            await message.answer("–ó–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ—Ç.")
            return
        await message.answer("–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è:")
        for order in orders:
            await message.answer(
                await format_order_details(order),
                parse_mode="HTML",
                reply_markup=get_dispatcher_approval_kb(order['id'])
            )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏.")

@dp.callback_query(F.data.startswith("view_order_"))
async def view_order_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    response = await api_client.get(f"/orders/{order_id}")
    if response.status_code == 200:
        order = response.json()
        await callback.message.answer(
            await format_order_details(order),
            parse_mode="HTML",
            reply_markup=get_dispatcher_approval_kb(order['id'])
        )
        await callback.answer()
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É.", show_alert=True)

@dp.callback_query(F.data.startswith("dispatch_approve_"))
async def dispatch_approve_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    params = {"status": STATUS_APPROVED}
    response = await api_client.post(f"/orders/{order_id}/status", params=params)
    if response.status_code == 200:
        order = response.json()
        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º.")
        with suppress(TelegramAPIError):
            await bot.send_message(
                chat_id=order['customer_telegram_id'],
                text=f"üëç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –±—ã–ª–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º! –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë—Ç—Å—è –ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è."
            )
    else:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    await callback.answer()

@dp.callback_query(F.data.startswith("dispatch_decline_"))
async def dispatch_decline_init_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    await state.set_state(DispatcherDeclineFSM.getting_reason)
    await state.update_data(order_id=order_id, original_message=callback.message)
    await callback.message.edit_text(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{order_id}:")
    await callback.answer()

@dp.message(DispatcherDeclineFSM.getting_reason)
async def dispatch_decline_reason_handler(message: Message, state: FSMContext):
    reason = message.text
    data = await state.get_data()
    order_id = data['order_id']
    original_message = data['original_message']

    params = {"status": STATUS_DECLINED, "reason": reason}
    response = await api_client.post(f"/orders/{order_id}/status", params=params)
    
    if response.status_code == 200:
        order = response.json()
        await original_message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:\n\n{await format_order_details(order)}", parse_mode="HTML")
        with suppress(TelegramAPIError):
            await bot.send_message(chat_id=order['customer_telegram_id'], text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}", parse_mode="HTML")
    else:
        await original_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    
    await state.clear()


# === –õ–û–ì–ò–ö–ê –î–õ–Ø –í–û–î–ò–¢–ï–õ–Ø ---
@dp.message(F.text == "üìù –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
async def get_available_tasks(message: Message):
    try:
        response = await api_client.get("/orders/driver/available")
        response.raise_for_status()
        orders = response.json()
        if not orders:
            await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç. –û—Ç–¥—ã—Ö–∞–π—Ç–µ!")
            return
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏:")
        for order in orders:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order['id']}")]
            ])
            await message.answer(await format_order_details(order), reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: {e}")
@dp.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫")
async def driver_order_history(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/orders/driver/{telegram_id}/history")
        response.raise_for_status()
        orders = response.json()
        if not orders:
            await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.")
            return
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏:")
        for order in orders:
            await message.answer(await format_order_details(order), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

@dp.callback_query(F.data.startswith("take_order_"))
async def take_order_callback(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    driver_telegram_id = callback.from_user.id
    try:
        response = await api_client.post(f"/orders/{order_id}/assign/{driver_telegram_id}")
        response.raise_for_status()
        order = response.json()
        await callback.message.edit_text(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É ‚Ññ{order_id} –≤ —Ä–∞–±–æ—Ç—É.")
        customer_id = order.get("customer_telegram_id")
        if customer_id:
            with suppress(TelegramAPIError):
                await bot.send_message(
                    chat_id=customer_id,
                    text=f"üöó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º! –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
                )
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –µ–µ —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª.")
    await callback.answer()

@dp.message(F.text == "üöõ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def driver_active_orders(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/orders/driver/{telegram_id}/active")
        response.raise_for_status()
        orders = response.json()
        
        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        for order in orders:
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –ó–∞–±—Ä–∞–ª", callback_data=f"status_{order['id']}_picked"),
                    InlineKeyboardButton(text="üöö –í –ø—É—Ç–∏", callback_data=f"status_{order['id']}_delivering"),
                ],
                [
                    InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"status_{order['id']}_delivered")
                ]
            ])
            await message.answer(
                await format_order_details(order),
                parse_mode="HTML",
                reply_markup=buttons
            )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {e}")

@dp.callback_query(F.data.startswith("status_"))
async def update_status_by_driver(callback: CallbackQuery):
    parts = callback.data.split("_")
    order_id = int(parts[1])
    status_map = {"picked": "üîÑ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω", "delivering": "üöö –í –ø—É—Ç–∏", "delivered": STATUS_COMPLETED}
    status_text = status_map.get(parts[2])
    if not status_text: await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å."); return
    try:
        response = await api_client.post(f"/orders/{order_id}/status", params={"status": status_text})
        response.raise_for_status()
        order = response.json()
        if customer_telegram_id := order.get("customer_telegram_id"):
            with suppress(TelegramAPIError):
                await bot.send_message(chat_id=customer_telegram_id, text=f"üì¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n–°—Ç–∞—Ç—É—Å: {status_text}")
        
        final_text = f"üìå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {status_text}"
        if status_text == STATUS_COMPLETED:
            final_text += "\n\n–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é."
        await callback.message.edit_text(final_text)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    await callback.answer()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())