
import asyncio
import datetime
import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from contextlib import suppress
from aiogram.exceptions import TelegramAPIError
import os
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN env var")

API_URL = os.getenv("API_URL", "http://localhost:8000")
api_client = httpx.AsyncClient(base_url=API_URL)

# --- –°—Ç–∞—Ç—É—Å—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π ------------------------------
STATUS_CREATED = "created"
STATUS_PLANNING = "planning"
STATUS_DRIVER_ASSIGNED = "driver_assigned"
STATUS_IN_PROGRESS = "in_progress"
STATUS_COMPLETED = "completed"
STATUS_ARCHIVED = "archived"
status_map = {
    "picked": "in_progress",
    "delivering": "in_progress",
    "delivered": "completed"
}

status_labels = {
    "picked": "üîÑ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω",
    "delivering": "üöö –í –ø—É—Ç–∏",
    "delivered": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
}

ORDER_STATUS_TEXTS = {
    "created": "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
    "planning": "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞",
    "driver_assigned": "üöö –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω",
    "in_progress": "üöö –í –ø—É—Ç–∏",
    "completed": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
    "archived": "üì¶ –ê—Ä—Ö–∏–≤",
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------------------------------------------
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---------------------------------------------------------

customer_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")], [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")]],
    resize_keyboard=True
)
driver_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="üöõ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫")]
    ],
    resize_keyboard=True
)
dispatcher_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üßê –ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")]],
    resize_keyboard=True
)

confirm_order_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="order_confirm"),
                      InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]]
)
cancel_fsm_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")]],
                                    resize_keyboard=True, one_time_keyboard=True)

def get_dispatcher_approval_kb(order_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"dispatch_approve_{order_id}"),
                          InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"dispatch_decline_{order_id}")]]
    )

# --- FSM ---------------------------------------------------------------

def is_valid_phone(phone: str):
    clean = "".join(ch for ch in phone if ch.isdigit())
    return 10 <= len(clean) <= 12


class OrderFSM(StatesGroup):
    getting_cargo_name = State()
    getting_cargo_weight = State()
    getting_cargo_count = State()
    getting_cargo_size = State()
    getting_documents_info = State()
    getting_docs_contact = State()
    getting_cargo_contact = State()
    getting_address_from = State()
    getting_address_to = State()
    getting_recipient_info = State()
    getting_payment_required = State()
    getting_lead_time = State()
    getting_extra_info = State()
    confirming_order = State()

    waiting_driver_message = State()
    waiting_new_time = State()
    waiting_delay_reason = State()


class DispatcherDeclineFSM(StatesGroup):
    getting_reason = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------------------------

def parse_address_block(block):
    if isinstance(block, str):
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
            block = json.loads(block)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ JSON, —Ç–æ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            parts = block.split(",")
            return {
                "name": parts[0].strip() if len(parts) > 0 else "-",
                "phone": parts[1].strip() if len(parts) > 1 else "-",
                "address": ", ".join(parts[2:]).strip() if len(parts) > 2 else "-"
            }
    if isinstance(block, dict):
        return {
            "name": block.get("name", "-"),
            "phone": block.get("phone", "-"),
            "address": block.get("address", "-")
        }
    return {"name": "-", "phone": "-", "address": "-"}

async def format_order_details(order: dict, override_status: str = None) -> str:
    import json
    from datetime import datetime

    ORDER_STATUS_TEXTS = {
        "created": "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
        "planning": "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞",
        "driver_assigned": "üöö –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω",
        "in_progress": "üöö –í –ø—É—Ç–∏",
        "completed": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "archived": "üì¶ –ê—Ä—Ö–∏–≤",
    }

    if isinstance(order, str):
        try:
            order = json.loads(order)
        except Exception:
            return "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞—è–≤–∫—É."

    item = order.get("item", {})
    raw_status = order.get("status", "‚Äî")
    status = override_status or ORDER_STATUS_TEXTS.get(raw_status, raw_status)

    get_from = item.get("get_from", {})
    deliver_to = item.get("deliver_to", {})

    # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    lead_time = item.get("lead_time", "‚Äî")
    try:
        lead_time = datetime.fromisoformat(lead_time).strftime("%d.%m.%Y %H:%M")
    except Exception:
        pass  # –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ ISO

    details = (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{order.get('id', '‚Äî')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"üì¶ –ß—Ç–æ –≤–µ–∑–µ–º:\n"
        f"- –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {item.get('name', '‚Äî')}\n"
        f"- –í–µ—Å: {item.get('weight', '‚Äî')} –∫–≥\n"
        f"- –ö–æ–ª-–≤–æ: {item.get('count', '‚Äî')} —à—Ç\n"
        f"- –†–∞–∑–º–µ—Ä—ã: {item.get('size', '‚Äî')}\n\n"
        f"üìë –î–æ–∫—É–º–µ–Ω—Ç—ã: {item.get('documents', '–Ω–µ—Ç') or '–Ω–µ—Ç'}\n\n"
        f"üìç –ó–∞–±—Ä–∞—Ç—å —É:\n"
        f"- {get_from.get('name', '‚Äî')}\n"
        f"- {get_from.get('address', '‚Äî')}\n"
        f"- üìû {get_from.get('phone', '‚Äî')}\n\n"
        f"üèÅ –î–æ—Å—Ç–∞–≤–∏—Ç—å:\n"
        f"- {deliver_to.get('name', '‚Äî')}\n"
        f"- {deliver_to.get('address', '‚Äî')}\n"
        f"- üìû {deliver_to.get('phone', '‚Äî')}\n\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {'–î–∞' if item.get('need_payment') else '–ù–µ—Ç'}\n"
        f"üïí –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: {lead_time}"
    )

    extra = item.get("extra_info") or item.get("extra") or item.get("comments")
    if extra:
        details += f"\n\n‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{extra}"

    return details

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------------------------------------------------------

@dp.message(CommandStart())
async def cmd_start(message: Message):
    telegram_id = message.from_user.id
    try:
        resp = await api_client.get(f"/users/by_telegram/{telegram_id}")
        resp.raise_for_status()
        user = resp.json()
        role = user["role"]
        if role == "customer":
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}!", reply_markup=customer_menu)
        elif role == "driver":
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}!", reply_markup=driver_menu)
        elif role == "dispatcher":
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['name']}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.", reply_markup=dispatcher_menu)
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# ----------------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (customer) --------------------------

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_order(message: Message, state: FSMContext):
    await state.set_state(OrderFSM.getting_cargo_name)
    await message.answer("üì¶ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:", reply_markup=cancel_fsm_kb)

@dp.message(StateFilter(OrderFSM), F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")
async def cancel_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=customer_menu)

@dp.message(OrderFSM.getting_cargo_name)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(cargo_name=message.text)
    await state.set_state(OrderFSM.getting_cargo_weight)
    await message.answer("‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_cargo_weight)
async def set_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        if weight <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(cargo_weight=weight)
    await state.set_state(OrderFSM.getting_cargo_count)
    await message.answer("üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–∑–∞:", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_cargo_count)
async def set_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(cargo_count=count)
    await state.set_state(OrderFSM.getting_cargo_size)
    await message.answer("üìÄ –£–∫–∞–∂–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120x80x100 —Å–º):", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_cargo_size)
async def set_size(message: Message, state: FSMContext):
    await state.update_data(cargo_size=message.text)
    await state.set_state(OrderFSM.getting_documents_info)
    await message.answer("üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏:", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_documents_info)
async def set_docs(message: Message, state: FSMContext):
    docs = message.text.strip()
    await state.update_data(documents_info=docs)
    await state.set_state(OrderFSM.getting_cargo_contact)
    await message.answer("üë§ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–¥–∞—Å—Ç –≥—Ä—É–∑.\n\n–§–æ—Ä–º–∞—Ç: –ê–ª–µ–∫—Å–µ–π, +79991112233", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_cargo_contact)
async def set_cargo_contact(message: Message, state: FSMContext):
    parts = [p.strip() for p in message.text.split(",")]
    if len(parts) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(cargo_contact={"name": parts[0], "phone": parts[1]})
    await state.set_state(OrderFSM.getting_address_from)
    await message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å –≥—Ä—É–∑:", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_address_from)
async def set_addr_from(message: Message, state: FSMContext):
    await state.update_data(address_from=message.text)
    await state.set_state(OrderFSM.getting_address_to)
    await message.answer("üèÅ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä—É–∑:", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_address_to)
async def set_addr_to(message: Message, state: FSMContext):
    await state.update_data(address_to=message.text)
    await state.set_state(OrderFSM.getting_recipient_info)
    await message.answer("üéØ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n–§–æ—Ä–º–∞—Ç: –û–û–û –ü—Ä–∏–µ–º–ì—Ä—É–∑, +79997654321", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_recipient_info)
async def set_recipient(message: Message, state: FSMContext):
    parts = [p.strip() for p in message.text.split(",")]
    if len(parts) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(recipient={"name": parts[0], "phone": parts[1]})
    await state.set_state(OrderFSM.getting_payment_required)
    await message.answer("üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞? –í–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç':", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_payment_required)
async def set_payment(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(need_payment=(text == "–¥–∞"))
    await state.set_state(OrderFSM.getting_lead_time)
    await message.answer("üïí –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-16 14:30)", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_lead_time)
async def set_lead_time(message: Message, state: FSMContext):
    try:
        dt = datetime.datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú", reply_markup=cancel_fsm_kb)
        return
    await state.update_data(lead_time=dt.isoformat())
    await state.set_state(OrderFSM.getting_extra_info)
    await message.answer("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª", reply_markup=cancel_fsm_kb)

@dp.message(OrderFSM.getting_extra_info)
async def set_extra(message: Message, state: FSMContext):
    extra = "" if message.text.strip() == "-" else message.text.strip()
    await state.update_data(extra_info=extra)

    data = await state.get_data()
    summary = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:</b>\n\n"
        f"–ì—Ä—É–∑: {data['cargo_name']} / {data['cargo_weight']} –∫–≥ / "
        f"{data['cargo_count']} —à—Ç / {data['cargo_size']}\n"
        f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {data['documents_info']}\n"
        f"–ó–∞–±—Ä–∞—Ç—å: {data['cargo_contact']['name']}, {data['address_from']}\n"
        f"–î–æ—Å—Ç–∞–≤–∏—Ç—å: {data['address_to']} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å {data['recipient']['name']})\n"
        f"–û–ø–ª–∞—Ç–∞: {'–î–∞' if data['need_payment'] else '–ù–µ—Ç'}\n"
        f"–î–æ: {data['lead_time']}\n"
    )
    if extra:
        summary += f"‚ÑπÔ∏è {extra}\n"
    summary += "\n–í—Å–µ –≤–µ—Ä–Ω–æ?"

    await state.set_state(OrderFSM.confirming_order)
    await message.answer(summary, parse_mode="HTML", reply_markup=confirm_order_kb)

@dp.callback_query(OrderFSM.confirming_order, F.data == "order_cancel")
async def cancel_order_cb(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer()
    await call.message.delete()
    await bot.send_message(call.from_user.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=customer_menu)

@dp.callback_query(OrderFSM.confirming_order, F.data == "order_confirm")
async def confirm_order_cb(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = call.from_user.id

    item_payload = {
        "name": data["cargo_name"],
        "weight": data["cargo_weight"],
        "count": data["cargo_count"],
        "size": data["cargo_size"],
        "documents": data["documents_info"],
        "get_from": {
            "name": data["cargo_contact"]["name"],
            "phone": data["cargo_contact"]["phone"],
            "address": data["address_from"],
        },
        "deliver_to": {
            "name": data["recipient"]["name"],
            "phone": data["recipient"]["phone"],
            "address": data["address_to"],
        },
        "need_payment": data["need_payment"],
        "lead_time": data["lead_time"],
        "comments": data["extra_info"],
    }

    try:
        resp = await api_client.post(
            "/orders/",
            params={"customer_telegram_id": telegram_id},
            json=item_payload,
        )
        resp.raise_for_status()
        order = resp.json()

        await call.message.delete()
        await bot.send_message(telegram_id, f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']} —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=customer_menu)

        # –£–≤–µ–¥–æ–º–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ —Å—Ä–∞–∑—É —Å –ø–æ–ª–Ω–æ–π –∑–∞—è–≤–∫–æ–π
        users = (await api_client.get("/users/")).json()
        for u in users:
            if u["role"] == "dispatcher":
                msg_text = f"üì¨ {ORDER_STATUS_TEXTS[order['status']]}\n\n"
                msg_text += await format_order_details(order)
                await bot.send_message(
                    chat_id=u["telegram_id"],
                    text=msg_text,
                    parse_mode="HTML",
                    reply_markup=get_dispatcher_approval_kb(order["id"])
                )

    except Exception as e:
        await bot.send_message(telegram_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await call.answer()

# ------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (customer) -------------------------

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def view_customer_orders(message: Message):
    telegram_id = message.from_user.id
    try:
        orders = (await api_client.get(f"/orders/customer/{telegram_id}")).json()
        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        for order in orders:
            await message.answer(await format_order_details(order), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# ------------------- Dispatcher flows -----------------------------------

@dp.message(F.text == "üßê –ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def dispatcher_pending(message: Message):
    try:
        response = await api_client.get("/orders/", params={"status": STATUS_CREATED})
        orders = response.json()
    except Exception:
        orders = []
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return
    for order in orders:
        if not isinstance(order, dict):
            continue
        msg = await format_order_details(order)
        await message.answer(msg, reply_markup=get_dispatcher_approval_kb(order["id"]))

@dp.callback_query(F.data.startswith("dispatch_approve_"))
async def dispatcher_approve(call: CallbackQuery):
    order_id = int(call.data.split("_")[-1])
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        order = (
            await api_client.post(
                f"/orders/{order_id}/status",
                params={"status": STATUS_PLANNING}
            )
        ).json()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º)
        msg_text = f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
        msg_text += await format_order_details(order)
        await call.message.edit_text(msg_text, reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞—è–≤–∫—É
        customer = order.get("customer", {})
        telegram_id = customer.get("telegram_id")
        if telegram_id:
            await bot.send_message(
                telegram_id,
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
                + await format_order_details(order)
            )

    except Exception as e:
        await call.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    await call.answer()

@dp.callback_query(F.data.startswith("dispatch_decline_"))
async def dispatcher_decline_init(call: CallbackQuery, state: FSMContext):
    await state.set_state(DispatcherDeclineFSM.getting_reason)
    await state.update_data(order_id=int(call.data.split("_")[-1]), original_message=call.message)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await call.answer()

@dp.message(DispatcherDeclineFSM.getting_reason)
async def dispatcher_decline_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    reason = message.text.strip()
    order_id = data["order_id"]
    original = data["original_message"]
    try:
        order = (
            await api_client.post(f"/orders/{order_id}/status",
                                  params={"status": STATUS_ARCHIVED})
        ).json()

        # –û–±–Ω–æ–≤–∏—Ç—å —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–æ–π
        text = f"‚ùå –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        text += await format_order_details(order)
        await original.edit_text(text, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
        customer_id = order["customer"]["telegram_id"]
        msg = f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        msg += await format_order_details(order)
        await bot.send_message(customer_id, msg, parse_mode="HTML")

    except Exception as e:
        await original.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

# ------------------- Driver flows (–Ω–æ–≤—ã–µ / –∞–∫—Ç–∏–≤–Ω—ã–µ / –∏—Å—Ç–æ—Ä–∏—è) ----------

@dp.message(F.text == "üìù –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
async def get_available_tasks(message: Message):
    try:
        response = await api_client.get("/orders/", params={"status": "planning"})
        response.raise_for_status()
        orders = response.json()
        if not orders:
            await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç. –û—Ç–¥—ã—Ö–∞–π—Ç–µ!")
            return
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏:")
        for order in orders:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order['id']}")]
            ])
            await message.answer(await format_order_details(order), reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: {e}")

@dp.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫")
async def driver_order_history(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/orders/driver/{telegram_id}/history")
        response.raise_for_status()
        orders = response.json()
        if not orders:
            await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.")
            return
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏:")
        for order in orders:
            await message.answer(await format_order_details(order), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

@dp.callback_query(F.data.startswith("take_order_"))
async def take_order_callback(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    driver_telegram_id = callback.from_user.id
    try:
        response = await api_client.post(f"/orders/{order_id}/assign/{driver_telegram_id}")
        response.raise_for_status()
        order = response.json()
        await callback.message.edit_text(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É ‚Ññ{order_id} –≤ —Ä–∞–±–æ—Ç—É.")
        if 'customer' in order and order['customer'].get('telegram_id'):
            customer_id = order['customer']['telegram_id']
            with suppress(TelegramAPIError):
                await bot.send_message(
                    chat_id=customer_id,
                    text=f"üöó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º! –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
                )
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –µ–µ —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª.")
    await callback.answer()

@dp.message(F.text == "üöõ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def driver_active_orders(message: Message):
    telegram_id = message.from_user.id
    try:
        response = await api_client.get(f"/orders/driver/{telegram_id}/active")
        response.raise_for_status()
        orders = response.json()

        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        for order in orders:
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –ó–∞–±—Ä–∞–ª", callback_data=f"status_{order['id']}_picked"),
                    InlineKeyboardButton(text="üöö –í –ø—É—Ç–∏", callback_data=f"status_{order['id']}_delivering"),
                ],
                [
                    InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"status_{order['id']}_delivered"),
                    InlineKeyboardButton(text="üì© –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º", callback_data=f"contact_customer_{order['id']}")
                ]
            ])

            await message.answer(
                await format_order_details(order),
                parse_mode="HTML",
                reply_markup=buttons
            )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {e}")

@dp.callback_query(F.data.startswith("contact_customer_"))
async def start_contact_customer(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    await state.update_data(order_id=order_id)
    await state.set_state(OrderFSM.waiting_driver_message)
    await callback.message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ: *–ü–µ—Ä–µ–Ω–æ—Å –≤—Ä–µ–º–µ–Ω–∏*")
    await callback.answer()

@dp.message(OrderFSM.waiting_driver_message)
async def handle_driver_message(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    order_id = data["order_id"]

    if text.lower().startswith("–ø–µ—Ä–µ–Ω–æ—Å –≤—Ä–µ–º–µ–Ω–∏"):
        await state.set_state(OrderFSM.waiting_new_time)
        await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    else:
        try:
            order = (await api_client.get(f"/orders/{order_id}")).json()
            customer_id = order["customer"]["telegram_id"]
            await bot.send_message(
                chat_id=customer_id,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id}:\n\n{text}"
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É.")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await state.clear()

@dp.message(OrderFSM.waiting_new_time)
async def get_new_time(message: Message, state: FSMContext):
    try:
        new_time = datetime.datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(new_lead_time=new_time.isoformat())
        await state.set_state(OrderFSM.waiting_delay_reason)
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–Ω–æ—Å–∞:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-06-20 15:30")

@dp.message(OrderFSM.waiting_delay_reason)
async def send_delay_info(message: Message, state: FSMContext):
    data = await state.get_data()
    reason = message.text.strip()
    order_id = data["order_id"]
    new_time = data["new_lead_time"]

    try:
        order = (await api_client.get(f"/orders/{order_id}")).json()
        customer_id = order["customer"]["telegram_id"]
        await bot.send_message(
            chat_id=customer_id,
            text=(
                f"üì¶ –í–∞—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ{order_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞.\n"
                f"üïí –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}\n"
                f"üìÑ –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        )
        await message.answer("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    await state.clear()

@dp.callback_query(F.data.startswith("status_"))
async def update_status_by_driver(callback: CallbackQuery):
    parts = callback.data.split("_")
    order_id = int(parts[1])
    step = parts[2]  # picked / delivering / delivered

    backend_status_map = {
        "picked": "in_progress",
        "delivering": "in_progress",
        "delivered": "completed"
    }

    readable_status_map = {
        "picked": "üîÑ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω",
        "delivering": "üöö –í –ø—É—Ç–∏",
        "delivered": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    }

    backend_status = backend_status_map.get(step)
    readable_status = readable_status_map.get(step)

    if not backend_status:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
        return

    try:
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        response = await api_client.post(f"/orders/{order_id}/status", params={"status": backend_status})
        response.raise_for_status()
        order = response.json()

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç—É
        if 'customer' in order and order['customer'].get('telegram_id'):
            customer_id = order['customer']['telegram_id']
            text = f"üì¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
            text += await format_order_details(order, override_status=readable_status)
            with suppress(TelegramAPIError):
                await bot.send_message(chat_id=customer_id, text=text)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
        await callback.message.edit_text(
            f"üìå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {readable_status}"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    await callback.answer()

# ------------------- Run polling ----------------------------------------

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
