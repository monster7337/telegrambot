import os
import datetime
from typing import List, Optional, Dict, Generator
from sqlalchemy import BigInteger
from fastapi import FastAPI, HTTPException, Depends, status
from pydantic import BaseModel, Field
import json
from fastapi.encoders import jsonable_encoder

from sqlalchemy import (
    create_engine,
    Column,
    Integer,
    String,
    JSON,
    DateTime,
    ForeignKey,
    select,
)
from sqlalchemy.orm import (
    declarative_base,
    relationship,
    sessionmaker,
    Session,
)

DATABASE_URL = os.environ["DATABASE_URL"]

engine = create_engine(DATABASE_URL, echo=False, future=True)
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False, autoflush=False)

Base = declarative_base()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_NEW = "\U0001F195 –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"  # üÜï
STATUS_PENDING_APPROVAL = "\u23F3 –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"  # ‚è≥
STATUS_APPROVED_BY_DISPATCHER = "\u2705 –û–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è"  # ‚úÖ
STATUS_DECLINED_BY_DISPATCHER = "\u274C –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º"  # ‚ùå
STATUS_ASSIGNED_TO_DRIVER = "\U0001F69A –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω"  # üöö
STATUS_PICKED = "\U0001F504 –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω"  # üîÑ
STATUS_DELIVERING = "\U0001F69A –í –ø—É—Ç–∏"  # üöö 
STATUS_COMPLETED = "\U0001F3C1 –í—ã–ø–æ–ª–Ω–µ–Ω–∞"  # üèÅ


# SQLAlchemy –º–æ–¥–µ–ª–∏

class UserDB(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(BigInteger, unique=True, index=True, nullable=False)
    role = Column(String, index=True, nullable=False)
    name = Column(String, nullable=False)
    phone = Column(String, nullable=False)

    orders = relationship(
        "OrderDB", back_populates="customer", foreign_keys="OrderDB.customer_id"
    )
    deliveries = relationship(
        "OrderDB", back_populates="driver", foreign_keys="OrderDB.driver_id"
    )


class OrderDB(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, index=True)

    customer_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    customer_telegram_id = Column(BigInteger, index=True, nullable=False)
    driver_id = Column(Integer, ForeignKey("users.id"), nullable=True)

    status = Column(String, default=STATUS_NEW, index=True)
    payload = Column(JSON, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow, nullable=False)

    customer = relationship("UserDB", foreign_keys=[customer_id], back_populates="orders")
    driver = relationship("UserDB", foreign_keys=[driver_id], back_populates="deliveries")


# Pydantic —Å—Ö–µ–º—ã (response models)
class User(BaseModel):
    id: int
    telegram_id: int
    role: str
    name: str
    phone: str

    class Config:
        orm_mode = True


class Order(BaseModel):
    id: int
    customer_id: int
    customer_telegram_id: int
    driver_id: Optional[int]
    status: str
    payload: Dict
    created_at: datetime.datetime

    class Config:
        orm_mode = True
# --- –°—Ö–µ–º–∞ payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ --- #

class ContactInfo(BaseModel):
    name: str
    phone: str
    address: Optional[str] = None


class CargoInfo(BaseModel):
    name: str
    weight: int
    count: int
    size: str


class PayloadSchema(BaseModel):
    cargo: CargoInfo
    documents: str
    get_from: ContactInfo
    pickup_contact: ContactInfo
    docs_contact: Optional[ContactInfo] = None
    deliver_to: ContactInfo
    address_from: str
    need_payment: bool
    lead_time: datetime.datetime
    extra_info: Optional[str] = None

# FastAPI –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏
app = FastAPI(title="Logistics Bot Backend (PostgreSQL)")


@app.on_event("startup")
def _startup() -> None:
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)"""
    Base.metadata.create_all(bind=engine)


def get_db() -> Generator[Session, None, None]:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.get("/users/", response_model=List[User])
def get_all_users(db: Session = Depends(get_db)):
    return db.execute(select(UserDB)).scalars().all()

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
@app.get("/users/{user_id}", response_model=User)
def get_user_by_id(user_id: int, db: Session = Depends(get_db)):
    user = db.get(UserDB, user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
@app.get("/users/by_telegram/{telegram_id}", response_model=Optional[User])
def get_user_by_telegram_id(telegram_id: int, db: Session = Depends(get_db)):
    return (
        db.execute(select(UserDB).where(UserDB.telegram_id == telegram_id))
        .scalars()
        .first()
    )

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
@app.get("/users/by_role/{role}", response_model=List[User])
def get_users_by_role(role: str, db: Session = Depends(get_db)):
    return db.execute(select(UserDB).where(UserDB.role == role)).scalars().all()
# Endpoints –¥–ª—è –∑–∞—è–≤–æ–∫
@app.post("/orders/", response_model=Order, status_code=status.HTTP_201_CREATED)
def create_order(customer_telegram_id: int, payload: PayloadSchema, db: Session = Depends(get_db)):
    customer = db.execute(select(UserDB).where(UserDB.telegram_id == customer_telegram_id)).scalars().first()
    if not customer or customer.role != "customer":
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏")

    # üîß –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ datetime
    encoded_payload = jsonable_encoder(payload.dict())

    order_db = OrderDB(
        customer_id=customer.id,
        customer_telegram_id=customer.telegram_id,
        payload=encoded_payload,
        status=STATUS_PENDING_APPROVAL,
    )
    db.add(order_db)
    db.commit()
    db.refresh(order_db)
    return order_db

@app.get("/orders/customer/{telegram_id}", response_model=List[Order])
def get_customer_orders(telegram_id: int, db: Session = Depends(get_db)):
    customer = (
        db.execute(select(UserDB).where(UserDB.telegram_id == telegram_id))
        .scalars()
        .first()
    )
    if not customer:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return (
        db.execute(select(OrderDB).where(OrderDB.customer_id == customer.id))
        .scalars()
        .all()
    )


@app.get("/orders/pending_approval", response_model=List[Order])
def get_pending_orders_for_dispatcher(db: Session = Depends(get_db)):
    return (
        db.execute(select(OrderDB).where(OrderDB.status == STATUS_PENDING_APPROVAL))
        .scalars()
        .all()
    )


@app.get("/orders/driver/available", response_model=List[Order])
def get_available_orders(db: Session = Depends(get_db)):
    return (
        db.execute(select(OrderDB).where(OrderDB.status == STATUS_APPROVED_BY_DISPATCHER))
        .scalars()
        .all()
    )


@app.post("/orders/{order_id}/assign/{driver_telegram_id}", response_model=Order)
def assign_driver(order_id: int, driver_telegram_id: int, db: Session = Depends(get_db)):
    order: OrderDB | None = db.get(OrderDB, order_id)
    driver: UserDB | None = (
        db.execute(select(UserDB).where(UserDB.telegram_id == driver_telegram_id))
        .scalars()
        .first()
    )
    if not order or not driver or driver.role != "driver":
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    order.driver_id = driver.id
    order.status = STATUS_ASSIGNED_TO_DRIVER
    db.commit()
    db.refresh(order)
    return order


@app.get("/orders/driver/{telegram_id}/active", response_model=List[Order])
def get_driver_active_orders(telegram_id: int, db: Session = Depends(get_db)):
    driver = (
        db.execute(select(UserDB).where(UserDB.telegram_id == telegram_id))
        .scalars()
        .first()
    )
    if not driver or driver.role != "driver":
        raise HTTPException(status_code=403, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å")

    active_statuses = [STATUS_ASSIGNED_TO_DRIVER, STATUS_PICKED, STATUS_DELIVERING]
    return (
        db.execute(
            select(OrderDB).where(
                OrderDB.driver_id == driver.id, OrderDB.status.in_(active_statuses)
            )
        )
        .scalars()
        .all()
    )


@app.get("/orders/driver/{telegram_id}/history", response_model=List[Order])
def get_driver_order_history(telegram_id: int, db: Session = Depends(get_db)):
    driver = (
        db.execute(select(UserDB).where(UserDB.telegram_id == telegram_id))
        .scalars()
        .first()
    )
    if not driver or driver.role != "driver":
        raise HTTPException(status_code=403, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å")

    return (
        db.execute(
            select(OrderDB).where(
                OrderDB.driver_id == driver.id, OrderDB.status == STATUS_COMPLETED
            )
        )
        .scalars()
        .all()
    )


@app.post("/orders/{order_id}/status", response_model=Order)
def update_order_status(order_id: int, status: str, db: Session = Depends(get_db)):
    order: OrderDB | None = db.get(OrderDB, order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    order.status = status
    db.commit()
    db.refresh(order)
    return order


@app.get("/orders/{order_id}/customer_phone")
def get_customer_phone(order_id: int, db: Session = Depends(get_db)):
    order: OrderDB | None = db.get(OrderDB, order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    customer: UserDB | None = db.get(UserDB, order.customer_id)
    if not customer:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return {"phone": customer.phone}


@app.get("/orders/{order_id}", response_model=Order)
def get_order_by_id(order_id: int, db: Session = Depends(get_db)):
    order = db.get(OrderDB, order_id)
    if not order:
        raise HTTPException(status_code=404, detail="Order not found")
    return order


# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

TEST_USERS = [
    dict(id=1, telegram_id=7198487225, role="customer", name="–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–∫–∞–∑—á–∏–∫", phone="+79001234567"),
    dict(id=2, telegram_id=7809176251, role="driver", name="–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å", phone="+79007654321"),
    dict(id=3, telegram_id=661832899, role="dispatcher", name="–ì–ª–∞–≤–Ω—ã–π –î–∏—Å–ø–µ—Ç—á–µ—Ä", phone="+79001112233"),
]


@app.on_event("startup")
def _seed_data() -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞ (idempotent)."""
    with SessionLocal() as db:
        if db.execute(select(UserDB.id)).first() is None:
            db.add_all(UserDB(**u) for u in TEST_USERS)
            db.commit()
